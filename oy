#!/bin/sh
oy_list() {
	while getopts "d:p:t:" OY_LS_ARG; do
		case "$OY_LS_ARG" in
		"d") OY_DAYS_AGO="$OPTARG" ;;
		"p")
			for OY_P in $OPTARG; do
				OY_PROP="$OY_PROP $OY_P_SEP props_match like '%,$OY_P,%'"
				OY_P_SEP="and"
			done
			OY_PROP_CLAUSE="$OY_PROP_CLAUSE $OY_PROP_CLAUSE_SEP $OY_PROP"
			OY_PROP_CLAUSE_SEP="or"
			OY_PROP=
			OY_P_SEP=
			;;
		"t")
			OY_IFS="$IFS"
			IFS=,
			for OY_T in $OPTARG; do
				OY_TAG="$OY_TAG $OY_T_SEP tags_match like '%,$OY_T,%'"
				OY_T_SEP="and"
			done
			IFS="$OY_IFS"
			OY_TAG_CLAUSE="$OY_TAG_CLAUSE $OY_TAG_CLAUSE_SEP $OY_TAG"
			OY_TAG_CLAUSE_SEP="or"
			OY_TAG=
			OY_T_SEP=
			;;
		"?") oy_help && exit 1 ;;
		esac
	done
	OY_PROP_CLAUSE="${OY_PROP_CLAUSE-props_match like '%,status:open,%'}"
	OY_TAG_CLAUSE="${OY_TAG_CLAUSE-1=1}"
	sqlite3 "$OY_DB" "select task_id, description, props, tags
	from vw_tasks
	where date(coalesce(completed, datetime('now')), 'localtime') = date('now', 'localtime', '-${OY_DAYS_AGO-0} days')
		and ($OY_PROP_CLAUSE)
		and ($OY_TAG_CLAUSE)
	order by 1 desc"
}

oy_compact() {
	sqlite3 "$OY_DB" 'delete from task where ROWID in (
		select a.ROWID from task a
		left join vw_task_sets_first_and_last v on v.key = a.ROWID
		where v.key is null)'
}

oy_add() {
	[ "$#" -eq 0 ] && oy_err_exit 'add requires at least 1 task description'
	for OY_D in "$@"; do
		OY_DESC=$(echo "$OY_D" | sed "s/'/\\'/g")
		sqlite3 "$OY_DB" '
	insert into task (set_value, task_id, set_name, cargo)
	select 1, coalesce(max(task_id),count(1))+1,'\''version'\'', '\'"$OY_DESC"\''
  from task
  union
  select '\''open'\'', coalesce(max(task_id),count(1))+1, '\''status'\'', null
  from task'
	done
}

oy_edit() {
	[ "$#" -ne 2 ] && oy_err_exit 'edit needs a task id and description'
	OY_KEY="$1"
	OY_DESC=$(echo "$2" | sed "s/'/\\'/g")
	sqlite3 "$OY_DB" '
	insert into task (set_value, task_id, set_name, cargo)
  select *, '\'"$OY_DESC"\'' from vw_next_version
  where task_id = '"$OY_KEY"
}

oy_done() {
	[ "$#" -eq 0 ] && oy_err_exit 'done needs at least 1 task id'
	for OY_KEY in "$@"; do
		sqlite3 "$OY_DB" "insert into task (task_id, set_name, set_value, cargo)
		 select task_id, 'status', 'done', group_concat(day)
		 from (select * from vw_repeat_next union select $OY_KEY,null) x
		 where task_id = $OY_KEY
		 group by 1"
	done
}

oy_open() {
	[ "$#" -eq 0 ] && oy_err_exit 'open needs at least 1 task id'
	for OY_KEY in "$@"; do oy_prop "$OY_KEY" 'status' 'open'; done
}

oy_new() {
	sqlite3 "$OY_DB" <"$OY_DIR/tables.sql" &&
		sqlite3 "$OY_DB" <"$OY_DIR/views.sql" && printf "Created %s\n" "$OY_DB" >&2
}

oy_prop() {
	[ "$#" -lt 3 ] && oy_err_exit 'prop needs 3 or 4 arguments'
	OY_SET=$(echo "$2" | sed "s/[\t :,\"']//")
	! [ "$2" = "$OY_SET" ] &&
		oy_err_exit 'prop names cannot have whitespace, quotes, comma or colon'
	OY_TXT=$(echo "$3" | sed "s/[\t :,\"']//")
	! [ "$3" = "$OY_TXT" ] &&
		oy_err_exit 'prop values cannot have whitespace, quotes, comma or colon'
	OY_CAR=$(echo "$4" | sed "s/'/\\'/g")
	sqlite3 "$OY_DB" 'insert into task (task_id, set_name, set_value, cargo)
	  values ('"$1"', '\'"$OY_SET"\'', '\'"$OY_TXT"\'',
		nullif('\'"$OY_CAR"\'','\'\''))'
}

oy_tag() {
	[ "$#" -lt 2 ] && oy_err_exit 'tag requires at least 2 arguments'
	if [ "$1" = "del" ]; then
		shift
		OY_QRY_KEY="-1"
	else
		OY_QRY_KEY="$1"
	fi
	OY_KEY="$1"
	shift
	OY_NEW_TAGS=$({
		sqlite3 "$OY_DB" "select tag from vw_tags where task_id=$OY_QRY_KEY"
		for OY_TAG in "$@"; do
			OY_TAG_CHECK=$(echo "$OY_TAG" | sed "s/[\t :,\"']//")
			! [ "$OY_TAG" = "$OY_TAG_CHECK" ] &&
				oy_err_exit 'tags cannot have whitespace, quotes, comma or colon'
			echo "$OY_TAG"
		done
	} | sort -u | awk 'BEGIN { sep="" } { printf "%s%s", sep, $0; sep="," }
    END { printf "\n" }') &&
		sqlite3 "$OY_DB" "insert into task (task_id, set_name, set_value)
					values ($OY_KEY, 'tags', '$OY_NEW_TAGS')"
}

oy_bootstrap() {
	oy_dep_check "sqlite3"
	oy_dep_check "readlink"
	OY_PATH=$(readlink -f "$0")
	OY_DIR="${OY_PATH%/*}"
	OY_DB="${OY_DB-$OY_DIR/oy.db}"
	[ -e "$OY_DB" ] || oy_new
}

oy_repeat() {
	[ "$#" -lt 2 ] && oy_err_exit 'repeat requires at least 2 arguments'
	OY_KEY="$1"
	shift
	if [ "$1" = "off" ]; then
		sqlite3 "$OY_DB" "insert into task (task_id, set_name, set_value)
		values ($OY_KEY, 'repeat', 'off')"
		return
	fi
	OY_DAT="${1-%}"
	OY_CHK=$(echo "$OY_DAT" | sed 's/[^0-9%-]//g')
	! [ "$OY_CHK" = "$OY_DAT" ] &&
		oy_err_exit "'$OY_DAT' is not a valid date pattern"
	OY_DOW="${2-%}"
	OY_CHK=$(echo "$OY_DOW" | sed 's/[^0-6%]//g')
	! [ "$OY_CHK" = "$OY_DOW" ] &&
		oy_err_exit "Days of the week can only contain 0123456% (got: '$OY_DOW')"
	OY_NTH="${3-%}"
	OY_CHK=$(echo "$OY_NTH" | sed 's/[^0-5L%]//g')
	! [ "$OY_CHK" = "$OY_NTH" ] &&
		oy_err_exit "Nth day of the week can only contain 12345L (got: '$OY_NTH')"

	sqlite3 "$OY_DB" "insert into task (task_id, set_name, set_value, cargo)
	values ($OY_KEY, 'repeat', 'on', '$OY_DAT $OY_DOW $OY_NTH')"
}

oy_dep_check() {
	command -v "$1" >/dev/null && return 0
	oy_err_exit "Didn't find the utility '$1' on this system"
}

oy_err_exit() {
	printf "%s\n" "$1" >&2
	exit 1
}

oy_help() {
	printf 'oy [command|list]

Commands
  a|add  <desc> [desc ...]                add task(s)
  compact                                 delete all intermediate task data
  d|done <#> [# ...]                      mark task(s) as done
  e|edit <#> <desc>                       edit task description
  h|help                                  print this help
  l|list [-d #] [-p name:value] [-t name] print tasks
  o|open <#> [# ...]                      re-open task(s)
  p|prop <#> <set> <name> [cargo]         add/update a property of a task
  r|repeat <#> [off|schedule]             repeat task according to a schedule
  t|tag  [del] <#> <name> [name ...]      delete all and/or add tag(s) to a task

  Repeat Schedules
  A schedule comprises of up to three strings in the format:
 
	YYYY-MM-DD Date pattern
	0123456    Days of the week
	12345L     Nth day of the month ("L" = last)

	The wildcard %% may also be used:
  
    %%          Every day
    %%-07-04    July 4th
    %% 1        Mondays
		%% 12345    Mondays-Fridays
		%% 5 L      The last Friday of the month
		%% 3 1L     The first and last Wednesday of the month
'
}

oy_main() {
	oy_bootstrap
	for OY_KEY in $(sqlite3 "$OY_DB" 'select task_id from vw_repeat_tasks'); do
		oy_open "$OY_KEY"
	done
	[ "$#" -eq 0 ] && oy_list && exit 0
	OY_COM="$1"
	shift
	case "$OY_COM" in
	"a" | "add") oy_add "$@" ;;
	"compact") oy_compact ;;
	"d" | "done") oy_done "$@" ;;
	"e" | "edit") oy_edit "$@" ;;
	"l" | "list") oy_list "$@" ;;
	"o" | "open") oy_open "$@" ;;
	"p" | "prop") oy_prop "$@" ;;
	"r" | "repeat") oy_repeat "$@" ;;
	"t" | "tag") oy_tag "$@" ;;
	*) oy_help ;;
	esac
}

[ "${0##*/}" = "oy" ] && oy_main "$@"
true
